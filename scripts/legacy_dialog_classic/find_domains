#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pry-byebug'
require 'active_support'
require 'active_support/core_ext'

class VirtualHost
  attr_reader :path, :domains, :jcr_roots
  attr_writer :domains, :jcr_roots

  def initialize(path)
    @path = path
  end
end

MATCH_GROUP_REGEX = /\$\d.*$/i
PT_REGEX = /rewriterule \S+ (\S+) \[.*PT.*\]/i
VARIABLE_REGEX = /([A-Z_]+_WHITE_DOMAIN)/
WHITE_DOMAIN_REGEX = /define [A-Z_]+_white_domain (.+)$/i
emcm_web_root = ARGV[0].to_s

rewrite_dir = File.join(emcm_web_root, 'dispatcher', 'src', 'conf.d', 'rewrites')
virtual_hosts_dir = File.join(emcm_web_root, 'dispatcher', 'src', 'conf.d', 'available_vhosts')
variables_dir = File.join(emcm_web_root, 'dispatcher', 'src', 'conf.d', 'variables')
# ~/work/digital/emcm-web/develop/dispatcher/src/conf.d/available_vhosts/aem_cxd_sales_publish.vhost
# ~/work/digital/emcm-web/develop/dispatcher/src/conf.d/variables/sales_legalsolutions_tr_com_universal.vars

def find_domains_for_variable(variable, variables_dir)
  # binding.pry
  paths = Dir.entries(variables_dir)
    .select { |file| file =~ /\.vars$/ }
    .map(&:to_s)
    .reject(&:blank?)
  # binding.pry

  results = paths.map do |path|
    full_path = File.join(variables_dir, path)
    # binding.pry

    lines = File.readlines(full_path)
      .map(&:chomp)

    # binding.pry if path.match? /mena/
    results = lines
      .select { |line| line.match? /define #{variable} (.+)$/i }
      .map { |line| line.match(/define #{variable} (.+)$/i)[1] }

    # binding.pry
    results
  end

  results
    .flatten
    .reject(&:blank?)
end

def find_domains(rewrites_path, virtual_hosts_dir, variables_dir)
  paths = Dir.entries(virtual_hosts_dir)
    .select { |file| file =~ /\.vhost$/ }
    .map(&:to_s)
    .reject(&:blank?)

  results = paths.flat_map do |path|
    file_path = File.join(virtual_hosts_dir, path)

    lines = File.readlines(file_path)
      .map(&:chomp)

    has_rewrite_file = lines
      .select { |line| line =~ /include\s.*#{rewrites_path}/i }
      .any?

    # binding.pry
    next unless has_rewrite_file

    # binding.pry
    variables = lines
      .select { |line| line.match? VARIABLE_REGEX }
      .map { |line| line.match(VARIABLE_REGEX)[1] }
      .flatten

    # binding.pry unless variables.empty?
    next if variables.empty?

    items = variables
      .map { |variable| find_domains_for_variable(variable, variables_dir) }
      .flatten
      .reject(&:blank?)

    # binding.pry

    items
  end

  results = results
    .reject(&:blank?)

  # binding.pry unless results.empty?
  results
end

def find_virtual_hosts(rewrite_dir, virtual_hosts_dir, variables_dir)
  paths = Dir.entries(rewrite_dir)
    .select { |file| file =~ /\.rules$/ }
    .map(&:to_s)
    .reject(&:blank?)

  paths.map do |path|
    file_path = File.join(rewrite_dir, path)
    host = VirtualHost.new(path)

    lines = File.readlines(file_path)
      .map(&:chomp)

    results = lines
      .select { |line| line =~ PT_REGEX }
      .map { |line| line.match(PT_REGEX)[1] }
      .map(&:to_s)
      .map { |line| line.gsub('"', '') }
      .reject(&:blank?)
      .reject { |line| line.match?(/favicon\.ico$/) }
      .reject { |line| line.match?(/sitemap\.xml$/) }
      .reject { |line| line.match?(/robots\.txt$/) }
      .map { |line| line.gsub(MATCH_GROUP_REGEX, '') }
      .sort
      .uniq
    host.jcr_roots = results

    domains = find_domains(path, virtual_hosts_dir, variables_dir)
    host.domains = domains

    host
  end
end

results = find_virtual_hosts(rewrite_dir, virtual_hosts_dir, variables_dir)

binding.pry
puts "hello world"
